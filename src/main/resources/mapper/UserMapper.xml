<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.star.springbootinit.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.star.springbootinit.model.entity.User">
        <id property="userId" column="userId" jdbcType="BIGINT"/>
        <result property="userAccount" column="userAccount" jdbcType="VARCHAR"/>
        <result property="userPassword" column="userPassword" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="phone" column="phone" jdbcType="VARCHAR"/>
        <result property="gender" column="gender" jdbcType="TINYINT"/>
        <result property="userName" column="userName" jdbcType="VARCHAR"/>
        <result property="userAvatar" column="userAvatar" jdbcType="VARCHAR"/>
        <result property="userProfile" column="userProfile" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="TINYINT"/>
        <result property="usertype" column="usertype" jdbcType="VARCHAR"/>
        <result property="loginIp" column="loginIp" jdbcType="VARCHAR"/>
        <result property="createTime" column="createTime" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <select id="searchUserPermissions" parameterType="Long" resultType="string">
        select f.funcCode from user u ,userRole ur,role r,roleFunc rf, func f
                   where u.userId = ur.userId
                     and r.roleId=ur.roleId
                     and r.roleId = rf.roleId
                     and f.funcId=rf.funcId
                     and u.userId = #{userId,jdbcType=BIGINT};
    </select>
    <select id="searchUserRole" parameterType="long" resultType="string">
        select r.funcCode from user u ,userRole ur,role r
        where u.userId = ur.userId
          and r.roleId=ur.roleId
          and u.userId = #{userId,jdbcType=BIGINT};
    </select>
    <sql id="Base_Column_List">
        userId
        ,userAccount,userPassword,
        email,phone,gender,
        userName,userAvatar,userProfile,
        status,usertype,loginIp,
        createTime,updateTime
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        where userId = #{userId,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from user
        where userId = #{userId,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="userId" keyProperty="userId"
            parameterType="com.star.springbootinit.model.entity.User" useGeneratedKeys="true">
        insert into user
        ( userId, userAccount, userPassword
        , email, phone, gender
        , userName, userAvatar, userProfile
        , status, usertype, loginIp
        , createTime, updateTime)
        values ( #{userId,jdbcType=BIGINT}, #{userAccount,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}
               , #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{gender,jdbcType=TINYINT}
               , #{userName,jdbcType=VARCHAR}, #{userAvatar,jdbcType=VARCHAR}, #{userProfile,jdbcType=VARCHAR}
               , #{status,jdbcType=TINYINT}, #{usertype,jdbcType=VARCHAR}, #{loginIp,jdbcType=VARCHAR}
               , #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" keyColumn="userId" keyProperty="userId"
            parameterType="com.star.springbootinit.model.entity.User" useGeneratedKeys="true">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">userId,</if>
            <if test="userAccount != null">userAccount,</if>
            <if test="userPassword != null">userPassword,</if>
            <if test="email != null">email,</if>
            <if test="phone != null">phone,</if>
            <if test="gender != null">gender,</if>
            <if test="userName != null">userName,</if>
            <if test="userAvatar != null">userAvatar,</if>
            <if test="userProfile != null">userProfile,</if>
            <if test="status != null">status,</if>
            <if test="usertype != null">usertype,</if>
            <if test="loginIp != null">loginIp,</if>
            <if test="createTime != null">createTime,</if>
            <if test="updateTime != null">updateTime,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId,jdbcType=BIGINT},</if>
            <if test="userAccount != null">#{userAccount,jdbcType=VARCHAR},</if>
            <if test="userPassword != null">#{userPassword,jdbcType=VARCHAR},</if>
            <if test="email != null">#{email,jdbcType=VARCHAR},</if>
            <if test="phone != null">#{phone,jdbcType=VARCHAR},</if>
            <if test="gender != null">#{gender,jdbcType=TINYINT},</if>
            <if test="userName != null">#{userName,jdbcType=VARCHAR},</if>
            <if test="userAvatar != null">#{userAvatar,jdbcType=VARCHAR},</if>
            <if test="userProfile != null">#{userProfile,jdbcType=VARCHAR},</if>
            <if test="status != null">#{status,jdbcType=TINYINT},</if>
            <if test="usertype != null">#{usertype,jdbcType=VARCHAR},</if>
            <if test="loginIp != null">#{loginIp,jdbcType=VARCHAR},</if>
            <if test="createTime != null">#{createTime,jdbcType=TIMESTAMP},</if>
            <if test="updateTime != null">#{updateTime,jdbcType=TIMESTAMP},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.star.springbootinit.model.entity.User">
        update user
        <set>
            <if test="userAccount != null">
                userAccount = #{userAccount,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                userPassword = #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=TINYINT},
            </if>
            <if test="userName != null">
                userName = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userAvatar != null">
                userAvatar = #{userAvatar,jdbcType=VARCHAR},
            </if>
            <if test="userProfile != null">
                userProfile = #{userProfile,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="usertype != null">
                usertype = #{usertype,jdbcType=VARCHAR},
            </if>
            <if test="loginIp != null">
                loginIp = #{loginIp,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                createTime = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                updateTime = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where userId = #{userId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.star.springbootinit.model.entity.User">
        update user
        set userAccount  = #{userAccount,jdbcType=VARCHAR},
            userPassword = #{userPassword,jdbcType=VARCHAR},
            email        = #{email,jdbcType=VARCHAR},
            phone        = #{phone,jdbcType=VARCHAR},
            gender       = #{gender,jdbcType=TINYINT},
            userName     = #{userName,jdbcType=VARCHAR},
            userAvatar   = #{userAvatar,jdbcType=VARCHAR},
            userProfile  = #{userProfile,jdbcType=VARCHAR},
            status       = #{status,jdbcType=TINYINT},
            usertype     = #{usertype,jdbcType=VARCHAR},
            loginIp      = #{loginIp,jdbcType=VARCHAR},
            createTime   = #{createTime,jdbcType=TIMESTAMP},
            updateTime   = #{updateTime,jdbcType=TIMESTAMP}
        where userId = #{userId,jdbcType=BIGINT}
    </update>
</mapper>
